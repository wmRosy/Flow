<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\pilotF4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\pilotF4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Wed Apr 15 11:12:25 2015
<BR><P>
<H3>Maximum Stack Usage =       1228 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; communication_receive_usb &rArr; handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[42]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[45]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[70]">CAN2_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[71]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[72]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6f]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7f]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7e]">DCMI_IRQHandler</a> from dcmi.o(i.DCMI_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[8a]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream1_IRQHandler</a> from dcmi.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[76]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6d]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6e]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[58]">EXTI15_10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[38]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[39]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[34]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[81]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[80]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[28]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">I2C1_ER_IRQHandler</a> from i2c.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">I2C1_EV_IRQHandler</a> from i2c.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[79]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[78]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[89]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[88]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[29]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[73]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7d]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[87]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">SDIO_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[84]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[85]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[86]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[8c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[32]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">TIM2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">TIM6_DAC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">UART4_IRQHandler</a> from sonar.o(i.UART4_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[65]">UART5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[82]">UART7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[83]">UART8_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[77]">USART6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[14]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[13]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1c]">USBD_DevConnected</a> from usbd_core.o(i.USBD_DevConnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1d]">USBD_DevDisconnected</a> from usbd_core.o(i.USBD_DevDisconnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1a]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1b]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[17]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[19]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[16]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[15]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[18]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[a]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[11]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[5]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[d]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[10]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[f]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[c]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[b]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[8]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[9]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[25]">USBD_cdc_GetCfgDesc</a> from usbd_cdc_core.o(i.USBD_cdc_GetCfgDesc) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[2b]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2]">VCP_Ctrl</a> from usbd_cdc_vcp.o(i.VCP_Ctrl) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[4]">VCP_DataRx</a> from usbd_cdc_vcp.o(i.VCP_DataRx) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[3]">VCP_DataTx</a> from usbd_cdc_vcp.o(i.VCP_DataTx) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[1]">VCP_DeInit</a> from usbd_cdc_vcp.o(i.VCP_DeInit) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[0]">VCP_Init</a> from usbd_cdc_vcp.o(i.VCP_Init) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[30]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[8d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[8b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[22]">usbd_cdc_DataIn</a> from usbd_cdc_core.o(i.usbd_cdc_DataIn) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[23]">usbd_cdc_DataOut</a> from usbd_cdc_core.o(i.usbd_cdc_DataOut) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[1f]">usbd_cdc_DeInit</a> from usbd_cdc_core.o(i.usbd_cdc_DeInit) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[21]">usbd_cdc_EP0_RxReady</a> from usbd_cdc_core.o(i.usbd_cdc_EP0_RxReady) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[1e]">usbd_cdc_Init</a> from usbd_cdc_core.o(i.usbd_cdc_Init) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[24]">usbd_cdc_SOF</a> from usbd_cdc_core.o(i.usbd_cdc_SOF) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[20]">usbd_cdc_Setup</a> from usbd_cdc_core.o(i.usbd_cdc_Setup) referenced 2 times from usbd_cdc_core.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_encapsulated_data_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_statustext_send
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_encapsulated_data_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_statustext_send
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[154]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[157]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[155]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[161]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_data_reset_param_defaults
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltoa
</UL>

<P><STRONG><a name="[93]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[97]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[99]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1ae]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DCD_EP_Close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DeInit
</UL>

<P><STRONG><a name="[9c]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[9e]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[a0]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DataOut
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[100]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[a3]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[a5]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DataIn
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[b5]"></a>DCD_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[143]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_disable
</UL>

<P><STRONG><a name="[be]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>DCMI_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_disable
</UL>

<P><STRONG><a name="[bd]"></a>DCMI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dcmi.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>DCMI_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[69]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dcmi.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_swap_buffers
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_disable
</UL>

<P><STRONG><a name="[148]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[14a]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[149]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[c2]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrentMemoryTarget))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_swap_buffers
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_it_init
</UL>

<P><STRONG><a name="[14c]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[15c]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_MemoryTargetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_swap_buffers
</UL>

<P><STRONG><a name="[2d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[196]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readI2CAddressOffset
</UL>

<P><STRONG><a name="[d4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOn
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_trigger
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOff
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle
</UL>

<P><STRONG><a name="[28]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1_ER_IRQHandler &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, i2c.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1_EV_IRQHandler &rArr; I2C_GetLastEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CleanADDRandSTOPF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>

<P><STRONG><a name="[18f]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>

<P><STRONG><a name="[c9]"></a>I2C_CleanADDRandSTOPF</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c.o(i.I2C_CleanADDRandSTOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_CleanADDRandSTOPF
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
</UL>

<P><STRONG><a name="[ca]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
</UL>

<P><STRONG><a name="[18e]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>

<P><STRONG><a name="[192]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>

<P><STRONG><a name="[c6]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_GetLastEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[cc]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
</UL>

<P><STRONG><a name="[c5]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>

<P><STRONG><a name="[c8]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SoftwareResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[174]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_StretchClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[ce]"></a>LEDInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>LEDOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.LEDOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>LEDOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.LEDOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDOn
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>LEDToggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(i.LEDToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_it_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[109]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[73]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[10d]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[13b]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[cb]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[10c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[cd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[19b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[176]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>

<P><STRONG><a name="[178]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>

<P><STRONG><a name="[177]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>

<P><STRONG><a name="[19a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[2c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; timer_update &rArr; timer_update_ms &rArr; sonar_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[140]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[13d]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[13e]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[13c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>

<P><STRONG><a name="[64]"></a>UART4_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, sonar.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART4_IRQHandler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sonar_value_and_get_mode_value
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_ringbuffer_pop_to_usart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_ringbuffer_push_from_usart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_ringbuffer_pop_to_usart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx_ringbuffer_push_from_usart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
</UL>

<P><STRONG><a name="[da]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_ringbuffer_push
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx_ringbuffer_pop
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_ringbuffer_push
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_ringbuffer_pop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
</UL>

<P><STRONG><a name="[db]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx_ringbuffer_push_from_usart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_ringbuffer_push_from_usart
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_ringbuffer_pop_to_usart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_ringbuffer_pop_to_usart
</UL>

<P><STRONG><a name="[103]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[e7]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[e8]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[e6]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[e9]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlPrepareRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
</UL>

<P><STRONG><a name="[ea]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[eb]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[e5]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[f4]"></a>USBD_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[f0]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[f2]"></a>USBD_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SessionRequest_ISR
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_OTG_ISR
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[102]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[106]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[108]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[107]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[a]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[f3]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[10e]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[10f]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[b8]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[ba]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[b7]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[a7]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[a1]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[ac]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[9f]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[9d]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[9b]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[a4]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[a2]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[113]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableDevInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[bb]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[112]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[b4]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[a8]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[115]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[111]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[f6]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[f7]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[aa]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[af]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[b0]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[b2]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[b6]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[b9]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[bc]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[2b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>VCP_get_char</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(i.VCP_get_char))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_usb
</UL>

<P><STRONG><a name="[116]"></a>VCP_put_char</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_cdc_vcp.o(i.VCP_put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VCP_put_char &rArr; VCP_DataTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_DataTx
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16b]"></a>buffer_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.buffer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[17a]"></a>communication_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, communication.o(i.communication_init))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>communication_parameter_send</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, communication.o(i.communication_parameter_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = communication_parameter_send &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>communication_receive</STRONG> (Thumb, 56 bytes, Stack size 296 bytes, communication.o(i.communication_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = communication_receive &rArr; handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx_ringbuffer_pop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_char_available
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>communication_receive_forward</STRONG> (Thumb, 56 bytes, Stack size 296 bytes, communication.o(i.communication_receive_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = communication_receive_forward &rArr; handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_ringbuffer_pop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_char_available
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>communication_receive_usb</STRONG> (Thumb, 52 bytes, Stack size 296 bytes, communication.o(i.communication_receive_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = communication_receive_usb &rArr; handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_get_char
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>communication_system_state_send</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, communication.o(i.communication_system_state_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = communication_system_state_send &rArr; mavlink_msg_heartbeat_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>compute_flow</STRONG> (Thumb, 2146 bytes, Stack size 416 bytes, flow.o(i.compute_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = compute_flow &rArr; compute_subpixel
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_subpixel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_sad_8x8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_diff
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_between_images
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>dcmi_clock_init</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, dcmi.o(i.dcmi_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dcmi_clock_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
</UL>

<P><STRONG><a name="[c1]"></a>dcmi_dma_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcmi.o(i.dcmi_dma_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcmi_dma_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reconfigure
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>dcmi_dma_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcmi.o(i.dcmi_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dcmi_dma_enable &rArr; dma_it_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_it_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reconfigure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_restart_calibration_routine
</UL>

<P><STRONG><a name="[146]"></a>dcmi_dma_init</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, dcmi.o(i.dcmi_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dcmi_dma_init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_frame_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reconfigure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
</UL>

<P><STRONG><a name="[14d]"></a>dcmi_hw_init</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, dcmi.o(i.dcmi_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dcmi_hw_init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
</UL>

<P><STRONG><a name="[14f]"></a>dcmi_restart_calibration_routine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcmi.o(i.dcmi_restart_calibration_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcmi_restart_calibration_routine &rArr; dcmi_dma_enable &rArr; dma_it_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>debug_int_message_buffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(i.debug_int_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_int_message_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_position_settings
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[152]"></a>debug_message_send_one</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, debug.o(i.debug_message_send_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = debug_message_send_one &rArr; mavlink_msg_statustext_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_statustext_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>debug_string_message_buffer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, debug.o(i.debug_string_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_string_message_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[17d]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_image
</UL>

<P><STRONG><a name="[17f]"></a>dma_copy_image_buffers</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, dcmi.o(i.dma_copy_image_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_copy_image_buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>dma_it_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dcmi.o(i.dma_it_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_it_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
</UL>

<P><STRONG><a name="[15b]"></a>dma_reconfigure</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dcmi.o(i.dma_reconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dma_reconfigure &rArr; dcmi_dma_init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[c3]"></a>dma_swap_buffers</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, dcmi.o(i.dma_swap_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_swap_buffers
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>enable_image_capture</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dcmi.o(i.enable_image_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = enable_image_capture &rArr; mt9v034_context_configuration &rArr; mt9v034_WriteReg16 &rArr; mt9v034_WriteReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_context_configuration
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_hw_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_enable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[156]"></a>ftoa</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, utils.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ftoa &rArr; ltoa
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltoa
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[1a1]"></a>getGyroRange</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro.o(i.getGyroRange))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
</UL>

<P><STRONG><a name="[1a0]"></a>getGyroScalingFactor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gyro.o(i.getGyroScalingFactor))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
</UL>

<P><STRONG><a name="[dc]"></a>get_boot_time_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.get_boot_time_us))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_swap_buffers
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>get_frame_counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcmi.o(i.get_frame_counter))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>get_sonar_measure_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sonar.o(i.get_sonar_measure_time))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
</UL>

<P><STRONG><a name="[138]"></a>get_time_between_images</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcmi.o(i.get_time_between_images))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[179]"></a>global_data_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settings.o(i.global_data_reset))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>global_data_reset_param_defaults</STRONG> (Thumb, 982 bytes, Stack size 8 bytes, settings.o(i.global_data_reset_param_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = global_data_reset_param_defaults
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>gyro_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gyro.o(i.gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gyro_config &rArr; spi_config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>gyro_read</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, gyro.o(i.gyro_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gyro_read &rArr; l3gd20_SendHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>handle_mavlink_message</STRONG> (Thumb, 1224 bytes, Stack size 296 bytes, communication.o(i.handle_mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemreset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_position_settings
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_set_context
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_context_configuration
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reconfigure
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_string_message_buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_int_message_buffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_reset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_ack_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_usb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_forward
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive
</UL>

<P><STRONG><a name="[16f]"></a>i2c_get_ownaddress1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c.o(i.i2c_get_ownaddress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_get_ownaddress1 &rArr; readI2CAddressOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readI2CAddressOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[171]"></a>i2c_init</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = i2c_init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StretchClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ownaddress1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>insert_sonar_value_and_get_mode_value</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sonar_mode_filter.o(i.insert_sonar_value_and_get_mode_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = insert_sonar_value_and_get_mode_value &rArr; sonar_bubble_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_bubble_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>l3gd20_SendHalfWord</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gyro.o(i.l3gd20_SendHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l3gd20_SendHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_read
</UL>

<P><STRONG><a name="[164]"></a>l3gd20_config</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gyro.o(i.l3gd20_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l3gd20_config &rArr; l3gd20_SendHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3gd20_SendHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_config
</UL>

<P><STRONG><a name="[15f]"></a>ltoa</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, utils.o(i.ltoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ltoa
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[8b]"></a>main</STRONG> (Thumb, 3554 bytes, Stack size 408 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = main &rArr; communication_receive_usb &rArr; handle_mavlink_message &rArr; mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_system_state_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_usb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_forward
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_parameter_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_data_reset_param_defaults
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_data_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_optical_flow_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_optical_flow_rad_send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOn
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sonar_measure_time
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_TX_buffer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_image
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_between_images
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_counter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_copy_image_buffers
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_restart_calibration_routine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[134]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[188]"></a>mavlink_get_channel_buffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, communication.o(i.mavlink_get_channel_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>

<P><STRONG><a name="[118]"></a>mavlink_get_channel_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, communication.o(i.mavlink_get_channel_status))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[124]"></a>mavlink_send_uart_bytes</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, communication.o(i.mavlink_send_uart_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_ringbuffer_push
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_ringbuffer_push
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
</UL>

<P><STRONG><a name="[19d]"></a>modifyreg32</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, reset.o(i.modifyreg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modifyreg32
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwr_enablebkp
</UL>

<P><STRONG><a name="[18d]"></a>mt9v034_ReadReg</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mt9v034.o(i.mt9v034_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mt9v034_ReadReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg16
</UL>

<P><STRONG><a name="[193]"></a>mt9v034_ReadReg16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mt9v034.o(i.mt9v034_ReadReg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mt9v034_ReadReg16 &rArr; mt9v034_ReadReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_context_configuration
</UL>

<P><STRONG><a name="[194]"></a>mt9v034_WriteReg</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, mt9v034.o(i.mt9v034_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mt9v034_WriteReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg16
</UL>

<P><STRONG><a name="[195]"></a>mt9v034_WriteReg16</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mt9v034.o(i.mt9v034_WriteReg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mt9v034_WriteReg16 &rArr; mt9v034_WriteReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_set_context
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_context_configuration
</UL>

<P><STRONG><a name="[15e]"></a>mt9v034_context_configuration</STRONG> (Thumb, 746 bytes, Stack size 128 bytes, mt9v034.o(i.mt9v034_context_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mt9v034_context_configuration &rArr; mt9v034_WriteReg16 &rArr; mt9v034_WriteReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg16
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_ReadReg16
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_image_capture
</UL>

<P><STRONG><a name="[16c]"></a>mt9v034_set_context</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mt9v034.o(i.mt9v034_set_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mt9v034_set_context &rArr; mt9v034_WriteReg16 &rArr; mt9v034_WriteReg &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v034_WriteReg16
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[170]"></a>readI2CAddressOffset</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, i2c.o(i.readI2CAddressOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readI2CAddressOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_ownaddress1
</UL>

<P><STRONG><a name="[147]"></a>reset_frame_counter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dcmi.o(i.reset_frame_counter))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcmi_dma_init
</UL>

<P><STRONG><a name="[180]"></a>send_calibration_image</STRONG> (Thumb, 604 bytes, Stack size 328 bytes, dcmi.o(i.send_calibration_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = send_calibration_image &rArr; mavlink_msg_encapsulated_data_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_encapsulated_data_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>set_sensor_position_settings</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settings.o(i.set_sensor_position_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_sensor_position_settings &rArr; debug_int_message_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_int_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[17c]"></a>sonar_config</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, sonar.o(i.sonar_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sonar_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>sonar_filter</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, sonar.o(i.sonar_filter))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_read
</UL>

<P><STRONG><a name="[181]"></a>sonar_read</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sonar.o(i.sonar_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sonar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>sonar_trigger</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sonar.o(i.sonar_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sonar_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_ms
</UL>

<P><STRONG><a name="[163]"></a>spi_config</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, gyro.o(i.spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_config
</UL>

<P><STRONG><a name="[19c]"></a>stm32_pwr_enablebkp</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, reset.o(i.stm32_pwr_enablebkp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32_pwr_enablebkp &rArr; modifyreg32
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modifyreg32
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemreset
</UL>

<P><STRONG><a name="[16e]"></a>systemreset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, reset.o(i.systemreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = systemreset &rArr; stm32_pwr_enablebkp &rArr; modifyreg32
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_systemreset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwr_enablebkp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[d8]"></a>timer_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_update &rArr; timer_update_ms &rArr; sonar_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19f]"></a>timer_update_ms</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, main.o(i.timer_update_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_update_ms &rArr; sonar_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_trigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[19e]"></a>up_systemreset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, reset.o(i.up_systemreset))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemreset
</UL>

<P><STRONG><a name="[183]"></a>update_TX_buffer</STRONG> (Thumb, 936 bytes, Stack size 112 bytes, i2c.o(i.update_TX_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = update_TX_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_time_us
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sonar_measure_time
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGyroScalingFactor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGyroRange
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>usart2_char_available</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.usart2_char_available))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_forward
</UL>

<P><STRONG><a name="[12d]"></a>usart2_rx_ringbuffer_pop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.usart2_rx_ringbuffer_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart2_rx_ringbuffer_pop &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_forward
</UL>

<P><STRONG><a name="[de]"></a>usart2_rx_ringbuffer_push_from_usart</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.usart2_rx_ringbuffer_push_from_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart2_rx_ringbuffer_push_from_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>usart2_tx_ringbuffer_pop_to_usart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.usart2_tx_ringbuffer_pop_to_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart2_tx_ringbuffer_pop_to_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>usart2_tx_ringbuffer_push</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(i.usart2_tx_ringbuffer_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart2_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>

<P><STRONG><a name="[12b]"></a>usart3_char_available</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.usart3_char_available))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive
</UL>

<P><STRONG><a name="[128]"></a>usart3_rx_ringbuffer_pop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.usart3_rx_ringbuffer_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart3_rx_ringbuffer_pop &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive
</UL>

<P><STRONG><a name="[e1]"></a>usart3_rx_ringbuffer_push_from_usart</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.usart3_rx_ringbuffer_push_from_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart3_rx_ringbuffer_push_from_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>usart3_tx_ringbuffer_pop_to_usart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.usart3_tx_ringbuffer_pop_to_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart3_tx_ringbuffer_pop_to_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>usart3_tx_ringbuffer_push</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(i.usart3_tx_ringbuffer_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>

<P><STRONG><a name="[17b]"></a>usart_init</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[117]"></a>_mav_finalize_message_chan_send</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, communication.o(i._mav_finalize_message_chan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_send
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_ack_send
</UL>

<P><STRONG><a name="[11a]"></a>_mavlink_send_uart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, communication.o(i._mavlink_send_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[119]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, communication.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[16d]"></a>mavlink_msg_command_ack_send</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, communication.o(i.mavlink_msg_command_ack_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mavlink_msg_command_ack_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[132]"></a>mavlink_msg_heartbeat_send</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, communication.o(i.mavlink_msg_heartbeat_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mavlink_msg_heartbeat_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_system_state_send
</UL>

<P><STRONG><a name="[126]"></a>mavlink_msg_param_value_send</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, communication.o(i.mavlink_msg_param_value_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = mavlink_msg_param_value_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_parameter_send
</UL>

<P><STRONG><a name="[167]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, communication.o(i.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mavlink_msg_to_send_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_mavlink_message
</UL>

<P><STRONG><a name="[129]"></a>mavlink_parse_char</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, communication.o(i.mavlink_parse_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mavlink_parse_char &rArr; mavlink_update_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_usb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive_forward
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_receive
</UL>

<P><STRONG><a name="[189]"></a>mavlink_start_checksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, communication.o(i.mavlink_start_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>

<P><STRONG><a name="[18a]"></a>mavlink_update_checksum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, communication.o(i.mavlink_update_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mavlink_update_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>

<P><STRONG><a name="[11b]"></a>_mav_finalize_message_chan_send</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, dcmi.o(i._mav_finalize_message_chan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_encapsulated_data_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_image
</UL>

<P><STRONG><a name="[11d]"></a>_mavlink_send_uart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dcmi.o(i._mavlink_send_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[11c]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dcmi.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[187]"></a>mavlink_msg_encapsulated_data_send</STRONG> (Thumb, 70 bytes, Stack size 288 bytes, dcmi.o(i.mavlink_msg_encapsulated_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_msg_encapsulated_data_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_image
</UL>

<P><STRONG><a name="[11e]"></a>_mav_finalize_message_chan_send</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, debug.o(i._mav_finalize_message_chan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_statustext_send
</UL>

<P><STRONG><a name="[120]"></a>_mavlink_send_uart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, debug.o(i._mavlink_send_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[11f]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, debug.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[151]"></a>debug_message_buffer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, debug.o(i.debug_message_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_string_message_buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_int_message_buffer
</UL>

<P><STRONG><a name="[158]"></a>mavlink_msg_statustext_send</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, debug.o(i.mavlink_msg_statustext_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mavlink_msg_statustext_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_message_send_one
</UL>

<P><STRONG><a name="[135]"></a>compute_diff</STRONG> (Thumb, 428 bytes, Stack size 36 bytes, flow.o(i.compute_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compute_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[136]"></a>compute_sad_8x8</STRONG> (Thumb, 548 bytes, Stack size 36 bytes, flow.o(i.compute_sad_8x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compute_sad_8x8
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[137]"></a>compute_subpixel</STRONG> (Thumb, 1062 bytes, Stack size 84 bytes, flow.o(i.compute_subpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = compute_subpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_flow
</UL>

<P><STRONG><a name="[121]"></a>_mav_finalize_message_chan_send</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, main.o(i._mav_finalize_message_chan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_optical_flow_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_optical_flow_rad_send
</UL>

<P><STRONG><a name="[123]"></a>_mavlink_send_uart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i._mavlink_send_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_send_uart_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[122]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>

<P><STRONG><a name="[186]"></a>mav_array_memcpy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>mavlink_msg_optical_flow_rad_send</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, main.o(i.mavlink_msg_optical_flow_rad_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mavlink_msg_optical_flow_rad_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>mavlink_msg_optical_flow_send</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, main.o(i.mavlink_msg_optical_flow_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mavlink_msg_optical_flow_send &rArr; _mav_finalize_message_chan_send &rArr; _mavlink_send_uart &rArr; mavlink_send_uart_bytes &rArr; usart3_tx_ringbuffer_push &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_finalize_message_chan_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>sonar_bubble_sort</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sonar_mode_filter.o(i.sonar_bubble_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sonar_bubble_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sonar_value_and_get_mode_value
</UL>

<P><STRONG><a name="[d9]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2]"></a>VCP_Ctrl</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(i.VCP_Ctrl))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>VCP_DataRx</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usbd_cdc_vcp.o(i.VCP_DataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VCP_DataRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>VCP_DataTx</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbd_cdc_vcp.o(i.VCP_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VCP_DataTx
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_put_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>VCP_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(i.VCP_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>VCP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(i.VCP_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[114]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>

<P><STRONG><a name="[a6]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[a9]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[ae]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[f8]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[b1]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[fa]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[f9]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[b3]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[fb]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[fc]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[fe]"></a>DCD_OTG_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_OTG_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_OTG_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[ab]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[fd]"></a>DCD_SessionRequest_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_SessionRequest_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_SessionRequest_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[ad]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[14]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_DevConnected</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_DevDisconnected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevDisconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[16]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[ed]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[ee]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f1]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[ef]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[ff]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[101]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[104]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[c4]"></a>Handle_USBAsynchXfer</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usbd_cdc_core.o(i.Handle_USBAsynchXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Handle_USBAsynchXfer &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_SOF
</UL>

<P><STRONG><a name="[25]"></a>USBD_cdc_GetCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc_core.o(i.USBD_cdc_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>usbd_cdc_DataIn</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbd_cdc_core.o(i.usbd_cdc_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_cdc_DataIn &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>usbd_cdc_DataOut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_cdc_core.o(i.usbd_cdc_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_cdc_DataOut &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>usbd_cdc_DeInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_cdc_core.o(i.usbd_cdc_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_cdc_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>usbd_cdc_EP0_RxReady</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_cdc_core.o(i.usbd_cdc_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_cdc_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>usbd_cdc_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_cdc_core.o(i.usbd_cdc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_cdc_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>usbd_cdc_SOF</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_cdc_core.o(i.usbd_cdc_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_cdc_SOF &rArr; Handle_USBAsynchXfer &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>usbd_cdc_Setup</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, usbd_cdc_core.o(i.usbd_cdc_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_cdc_Setup &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
